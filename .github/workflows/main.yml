name: "AIPriceAction Daily Report"

on:
  # Allows you to run this workflow manually from the Actions tab on GitHub
  workflow_dispatch:

  # Sets up a scheduled run
  schedule:
    - cron: "30 4 * * *"
    # Runs at 7:45 UTC, which is 2:45 PM in Vietnam (ICT), after the market closes.
    # Format is: Minute Hour Day(month) Month Day(week)
    - cron: "45 7 * * *"

# Grant write permissions to the GITHUB_TOKEN to allow the workflow to commit and push changes.
permissions:
  contents: write

jobs:
  generate-report:
    runs-on: ubuntu-latest
    name: Generate Daily Market Report

    steps:
      # Step 1: Check out the repository code so the workflow can access it.
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Step 2: Set up the specific version of Python you are using.
      - name: Set up Python 3.12
        uses: actions/setup-python@v2
        with:
          python-version: 3.12

      # Step 3: Install the required Python libraries from your requirements file.
      - name: Install dependencies
        run: pip install -r requirements.txt

      # Step 4: Clean up old data and reports before the new run.
      - name: Clean up old data and reports
        run: |
          # Create directories if they don't exist to prevent errors on the first run.
          mkdir -p market_data reports
          # Remove all previous data files to ensure a fresh download.
          rm -f market_data/*
          # Remove the old reports directory to clear out stale charts.
          rm -rf reports/*

      # Step 5: Run the main Python script to generate the new files.
      - name: Run data pipeline and generate report
        run: python main.py

      # Step 6: Combine all market data files into a single file.
      - name: Combine market data
        run: |
          cd market_data
          output_file="market_data.txt"

          if [ -f "$output_file" ]; then
              rm "$output_file"
          fi

          for file in *; do
              # Ensure that we are only processing files and not the output file itself.
              if [ -f "$file" ] && [ "$file" != "$output_file" ]; then
                  full_path=$(pwd)/"$file"
                  echo "// $full_path" >> "$output_file"
                  cat "$file" >> "$output_file"
                  echo "" >> "$output_file"
              fi
          done

          echo "All market data files have been combined into $output_file"

      # Step 7: Combine only the last 40 lines of each market data file.
      - name: Combine last 40 lines of market data
        run: |
          cd market_data
          tail_output_file="market_data_40_days.txt"

          if [ -f "$tail_output_file" ]; then
              rm "$tail_output_file"
          fi

          for file in *; do
              if [ -f "$file" ] && [ "$file" != "$tail_output_file" ]; then
                  full_path=$(pwd)/"$file"
                  echo "// $full_path" >> "$tail_output_file"
                  tail -n 40 "$file" >> "$tail_output_file"
                  echo "" >> "$tail_output_file"
              fi
          done

          echo "Last 40 lines of each file have been combined into $tail_output_file"

      # Step 8: Commit and push the updated report, data, and charts to the repository.
      - name: Commit and push changes
        run: |
          # Configure git with the details of the last commit's author to keep authorship consistent.
          git config user.name "$(git log -n 1 --pretty=format:%an)"
          git config user.email "$(git log -n 1 --pretty=format:%ae)"

          # Add all new/changed files to the staging area.
          git add .

          # Check if there are any changes to commit. If not, exit successfully.
          # This prevents the workflow from failing on days when the market is closed (no new data).
          if git diff-index --quiet HEAD; then
            echo "No changes to commit. Exiting."
            exit 0
          fi

          # Amend the last commit to avoid polluting the git history with daily update commits.
          git commit --amend --no-edit

          # Force push the amended commit to the repository.
          # --force-with-lease is a safer alternative to a standard --force.
          git push --force-with-lease
